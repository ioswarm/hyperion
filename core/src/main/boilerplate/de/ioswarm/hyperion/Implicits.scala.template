package de.ioswarm.hyperion;

import akka.actor.{Actor, ActorRef, Props}
import akka.cluster.sharding.ShardRegion.{ExtractEntityId, ExtractShardId}

import scala.concurrent.Future
import scala.concurrent.duration.Duration

object Implicits {

    implicit class ServiceExtender(s: Service) {

      def run(implicit hy: Hyperion): Future[ActorRef] = hy.run(s)

      def route(route: Service.ServiceRoute): HttpService = HttpServiceImpl(s, route)

      def singleton: Service = SingletonServiceImpl(s)

    }

    implicit class ActorServiceExtender(a: ActorService) {

      def sharding(entityIdExtract: ExtractEntityId = Service.defaultExtractEntityId
                   , shardIdExtract: ExtractShardId = Service.defaultExtractShardId): ShardingServiceImpl[ActorService] = ShardingServiceImpl(
        a
        , entityIdExtract
        , shardIdExtract
      )

    }

    implicit class PersistentServiceExtender[T](p: PersistentService[T]) {

      def sharding(entityIdExtract: ExtractEntityId = Service.defaultExtractEntityId
                   , shardIdExtract: ExtractShardId = Service.defaultExtractShardId)(implicit tu: Duration): ShardingServiceImpl[PersistentService[T]] = ShardingServiceImpl(
        p.withSharding(true).withTimeout(tu)
        , entityIdExtract
        , shardIdExtract
      )

    }

  private def createActorService(name: String, services: Service*)(f: Service.ServiceReceive): Service = ActorServiceImpl(name, receive = f, children = services)

  def service(name: String)(f: Service.ServiceReceive): Service = createActorService(name)(f)

  [#def service(name: String, [#s1: Service#])(f: ServiceContext => ([#ActorRef#]) => Actor.Receive): Service = createActorService(name, [#s1#]){ ctx =>
    [#val ref1 = ctx.actorOf(s1)#
    ]
    f(ctx)([#ref1#])
  }#
  ]

    implicit class StringExtender(s: String) {

      import Service._

      def props(p: Props): Service = forward(p)

      def ref(ref: ActorRef): Service = forward(ref)

      def receive(r: ServiceReceive): ActorService = ActorServiceImpl(name = s, receive = r)

      def forward(p: Props): Service = PropsForwardServiceImpl(s, p)

      def forward(ref: ActorRef): Service = ActorRefForwardServiceImpl(s, ref)

      def persist[T]: PersistentService[T] = persist[T](None)
      def persist[T](t: Option[T]): PersistentService[T] = PersistentServiceImpl[T](name = s, value = t)

      def service(f: Service.ServiceReceive): Service =  Implicits.service(s)(f)

      [#def service([#s1: Service#])(f: ServiceContext => ([#ActorRef#]) => Actor.Receive): Service = Implicits.service(s, [#s1#])(f)#
      ]

    }

}
